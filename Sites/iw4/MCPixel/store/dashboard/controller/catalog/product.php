<?phpclass ControllerCatalogProduct extends Controller {    private $error = array();    public function index() {        $this->language->load('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('catalog/product');        $this->getList();    }    public function add() {        $this->language->load('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('catalog/product');        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validateForm()) {            $this->model_catalog_product->addProduct($this->request->post);            $this->session->data['success'] = $this->language->get('text_success');            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->response->redirect($this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL'));        }        $this->getForm();    }    public function edit() {        $this->language->load('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('catalog/product');        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validateForm()) {            $this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);            $this->session->data['success'] = $this->language->get('text_success');            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->response->redirect($this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL'));        }        $this->getForm();    }    public function delete() {        $this->language->load('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('catalog/product');        if (isset($this->request->post['selected']) && $this->validateDelete()) {            foreach ($this->request->post['selected'] as $product_id) {                $this->model_catalog_product->deleteProduct($product_id);            }            $this->session->data['success'] = $this->language->get('text_success');            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->response->redirect($this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL'));        }        $this->getList();    }    public function copy() {        $this->language->load('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('catalog/product');        if (isset($this->request->post['selected']) && $this->validateCopy()) {            foreach ($this->request->post['selected'] as $product_id) {                $this->model_catalog_product->copyProduct($product_id);            }            $this->session->data['success'] = $this->language->get('text_success');            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->response->redirect($this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL'));        }        $this->getList();    }    protected function getList() {        if (isset($this->request->get['filter_name'])) {            $filter_name = $this->request->get['filter_name'];        } else {            $filter_name = null;        }        if (isset($this->request->get['filter_price'])) {            $filter_price = $this->request->get['filter_price'];        } else {            $filter_price = null;        }        if (isset($this->request->get['filter_status'])) {            $filter_status = $this->request->get['filter_status'];        } else {            $filter_status = null;        }        if (isset($this->request->get['sort'])) {            $sort = $this->request->get['sort'];        } else {            $sort = 'pd.name';        }        if (isset($this->request->get['order'])) {            $order = $this->request->get['order'];        } else {            $order = 'ASC';        }        if (isset($this->request->get['page'])) {            $page = $this->request->get['page'];        } else {            $page = 1;        }        $url = '';        if (isset($this->request->get['filter_name'])) {            $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));        }        if (isset($this->request->get['filter_price'])) {            $url .= '&filter_price=' . $this->request->get['filter_price'];        }        if (isset($this->request->get['filter_status'])) {            $url .= '&filter_status=' . $this->request->get['filter_status'];        }        if (isset($this->request->get['sort'])) {            $url .= '&sort=' . $this->request->get['sort'];        }        if (isset($this->request->get['order'])) {            $url .= '&order=' . $this->request->get['order'];        }        if (isset($this->request->get['page'])) {            $url .= '&page=' . $this->request->get['page'];        }        $data['breadcrumbs'] = array();        $data['breadcrumbs'][] = array(            'text' => $this->language->get('text_home'),            'href' => $this->url->link('dashboard/common/dashboard', 'token=' . $this->session->data['token'], 'SSL')        );        $data['breadcrumbs'][] = array(            'text' => $this->language->get('heading_title'),            'href' => $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL')        );        $data['add'] = $this->url->link('dashboard/catalog/product/add', 'token=' . $this->session->data['token'] . $url, 'SSL');        $data['copy'] = $this->url->link('dashboard/catalog/product/copy', 'token=' . $this->session->data['token'] . $url, 'SSL');        $data['delete'] = $this->url->link('dashboard/catalog/product/delete', 'token=' . $this->session->data['token'] . $url, 'SSL');        $data['products'] = array();        $filter_data = array(            'filter_name' => $filter_name,            'filter_price' => $filter_price,            'filter_status' => $filter_status,            'sort' => $sort,            'order' => $order,            'start' => ($page - 1) * $this->config->get('config_limit_admin'),            'limit' => $this->config->get('config_limit_admin')        );        $this->load->model('tool/image');        $product_total = $this->model_catalog_product->getTotalProducts($filter_data);        $results = $this->model_catalog_product->getProducts($filter_data);        foreach ($results as $result) {            if (is_file(DIR_DASHBOARD_IMAGE . $result['image'])) {                $image = $this->model_tool_image->resize($result['image'], 40, 40);            } else {                $image = $this->model_tool_image->resize('no_image.png', 40, 40);            }            $special = false;            $product_specials = $this->model_catalog_product->getProductSpecials($result['product_id']);            foreach ($product_specials as $product_special) {                if (($product_special['date_start'] == '0000-00-00' || strtotime($product_special['date_start']) < time()) && ($product_special['date_end'] == '0000-00-00' || strtotime($product_special['date_end']) > time())) {                    $special = $product_special['price'];                    break;                }            }            $data['products'][] = array(                'product_id' => $result['product_id'],                'image' => $image,                'name' => $result['name'],                'price' => $result['price'],                'special' => $special,                'status' => ($result['status']) ? $this->language->get('text_enabled') : $this->language->get('text_disabled'),                'edit' => $this->url->link('dashboard/catalog/product/edit', 'token=' . $this->session->data['token'] . '&product_id=' . $result['product_id'] . $url, 'SSL')            );        }        $data['heading_title'] = $this->language->get('heading_title');        $data['text_list'] = $this->language->get('text_list');        $data['text_enabled'] = $this->language->get('text_enabled');        $data['text_disabled'] = $this->language->get('text_disabled');        $data['text_no_results'] = $this->language->get('text_no_results');        $data['text_confirm'] = $this->language->get('text_confirm');        $data['column_image'] = $this->language->get('column_image');        $data['column_name'] = $this->language->get('column_name');        $data['column_model'] = $this->language->get('column_model');        $data['column_price'] = $this->language->get('column_price');        $data['column_quantity'] = $this->language->get('column_quantity');        $data['column_status'] = $this->language->get('column_status');        $data['column_action'] = $this->language->get('column_action');        $data['entry_name'] = $this->language->get('entry_name');        $data['entry_model'] = $this->language->get('entry_model');        $data['entry_price'] = $this->language->get('entry_price');        $data['entry_quantity'] = $this->language->get('entry_quantity');        $data['entry_status'] = $this->language->get('entry_status');        $data['button_copy'] = $this->language->get('button_copy');        $data['button_add'] = $this->language->get('button_add');        $data['button_edit'] = $this->language->get('button_edit');        $data['button_delete'] = $this->language->get('button_delete');        $data['button_filter'] = $this->language->get('button_filter');        $data['token'] = $this->session->data['token'];        if (isset($this->error['warning'])) {            $data['error_warning'] = $this->error['warning'];        } else {            $data['error_warning'] = '';        }        if (isset($this->session->data['success'])) {            $data['success'] = $this->session->data['success'];            unset($this->session->data['success']);        } else {            $data['success'] = '';        }        if (isset($this->request->post['selected'])) {            $data['selected'] = (array) $this->request->post['selected'];        } else {            $data['selected'] = array();        }        $url = '';        if (isset($this->request->get['filter_name'])) {            $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));        }        if (isset($this->request->get['filter_price'])) {            $url .= '&filter_price=' . $this->request->get['filter_price'];        }        if (isset($this->request->get['filter_status'])) {            $url .= '&filter_status=' . $this->request->get['filter_status'];        }        if ($order == 'ASC') {            $url .= '&order=DESC';        } else {            $url .= '&order=ASC';        }        if (isset($this->request->get['page'])) {            $url .= '&page=' . $this->request->get['page'];        }        $data['sort_name'] = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . '&sort=pd.name' . $url, 'SSL');        $data['sort_price'] = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.price' . $url, 'SSL');        $data['sort_status'] = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.status' . $url, 'SSL');        $data['sort_order'] = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.sort_order' . $url, 'SSL');        $url = '';        if (isset($this->request->get['filter_name'])) {            $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));        }        if (isset($this->request->get['filter_model'])) {            $url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));        }        if (isset($this->request->get['filter_price'])) {            $url .= '&filter_price=' . $this->request->get['filter_price'];        }        if (isset($this->request->get['filter_quantity'])) {            $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];        }        if (isset($this->request->get['filter_status'])) {            $url .= '&filter_status=' . $this->request->get['filter_status'];        }        if (isset($this->request->get['sort'])) {            $url .= '&sort=' . $this->request->get['sort'];        }        if (isset($this->request->get['order'])) {            $url .= '&order=' . $this->request->get['order'];        }        $pagination = new Pagination();        $pagination->total = $product_total;        $pagination->page = $page;        $pagination->limit = $this->config->get('config_limit_admin');        $pagination->url = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url . '&page={page}', 'SSL');        $data['pagination'] = $pagination->render();        $data['results'] = sprintf($this->language->get('text_pagination'), ($product_total) ? (($page - 1) * $this->config->get('config_limit_admin')) + 1 : 0, ((($page - 1) * $this->config->get('config_limit_admin')) > ($product_total - $this->config->get('config_limit_admin'))) ? $product_total : ((($page - 1) * $this->config->get('config_limit_admin')) + $this->config->get('config_limit_admin')), $product_total, ceil($product_total / $this->config->get('config_limit_admin')));        $data['filter_name'] = $filter_name;        $data['filter_price'] = $filter_price;        $data['filter_status'] = $filter_status;        $data['sort'] = $sort;        $data['order'] = $order;        $data['header'] = $this->load->controller('common/header');        $data['column_left'] = $this->load->controller('common/column_left');        $data['footer'] = $this->load->controller('common/footer');        $this->response->setOutput($this->load->view('catalog/product_list.tpl', $data));    }    protected function getForm() {        $data['heading_title'] = $this->language->get('heading_title');        $data['text_form'] = !isset($this->request->get['product_id']) ? $this->language->get('text_add') : $this->language->get('text_edit');        $data['text_enabled'] = $this->language->get('text_enabled');        $data['text_disabled'] = $this->language->get('text_disabled');        $data['text_none'] = $this->language->get('text_none');        $data['text_yes'] = $this->language->get('text_yes');        $data['text_no'] = $this->language->get('text_no');        $data['text_plus'] = $this->language->get('text_plus');        $data['text_minus'] = $this->language->get('text_minus');        $data['text_default'] = $this->language->get('text_default');        $data['text_option'] = $this->language->get('text_option');        $data['text_option_value'] = $this->language->get('text_option_value');        $data['text_select'] = $this->language->get('text_select');        $data['text_percent'] = $this->language->get('text_percent');        $data['text_amount'] = $this->language->get('text_amount');        $data['text_commands_onstart'] = $this->language->get('text_commands_onstart');        $data['text_commands_onstop'] = $this->language->get('text_commands_onstop');        $data['entry_name'] = $this->language->get('entry_name');        $data['entry_short_description'] = $this->language->get('entry_short_description');        $data['entry_long_description'] = $this->language->get('entry_long_description');        $data['entry_date_available'] = $this->language->get('entry_date_available');        $data['entry_quantity'] = $this->language->get('entry_quantity');        $data['entry_price'] = $this->language->get('entry_price');        $data['entry_price_converter'] = $this->language->get('entry_price_converter');        $data['entry_points'] = $this->language->get('entry_points');        $data['entry_option_points'] = $this->language->get('entry_option_points');        $data['entry_lifetime'] = $this->language->get('entry_lifetime');        $data['entry_length_class'] = $this->language->get('entry_length_class');        $data['entry_image'] = $this->language->get('entry_image');        $data['entry_store'] = $this->language->get('entry_store');        $data['entry_category'] = $this->language->get('entry_category');        $data['entry_filter'] = $this->language->get('entry_filter');        $data['entry_related'] = $this->language->get('entry_related');        $data['entry_attribute'] = $this->language->get('entry_attribute');        $data['entry_text'] = $this->language->get('entry_text');        $data['entry_required'] = $this->language->get('entry_required');        $data['entry_sort_order'] = $this->language->get('entry_sort_order');        $data['entry_status'] = $this->language->get('entry_status');        $data['entry_date_start'] = $this->language->get('entry_date_start');        $data['entry_date_end'] = $this->language->get('entry_date_end');        $data['entry_priority'] = $this->language->get('entry_priority');        $data['entry_tag'] = $this->language->get('entry_tag');        $data['entry_customer_group'] = $this->language->get('entry_customer_group');        $data['entry_layout'] = $this->language->get('entry_layout');        $data['entry_recurring'] = $this->language->get('entry_recurring');        $data['entry_duration'] = $this->language->get('entry_duration');        $data['entry_server'] = $this->language->get('entry_server');        $data['entry_command'] = $this->language->get('entry_command');        $data['entry_command_event'] = $this->language->get('entry_command_event');        $data['entry_command_value'] = $this->language->get('entry_command_value');        $data['entry_minecraft_group'] = $this->language->get('entry_minecraft_group');        $data['help_points'] = $this->language->get('help_points');        $data['help_category'] = $this->language->get('help_category');        $data['help_filter'] = $this->language->get('help_filter');        $data['help_related'] = $this->language->get('help_related');        $data['help_tag'] = $this->language->get('help_tag');        $data['button_save'] = $this->language->get('button_save');        $data['button_cancel'] = $this->language->get('button_cancel');        $data['button_attribute_add'] = $this->language->get('button_attribute_add');        $data['button_option_add'] = $this->language->get('button_option_add');        $data['button_option_value_add'] = $this->language->get('button_option_value_add');        $data['button_discount_add'] = $this->language->get('button_discount_add');        $data['button_special_add'] = $this->language->get('button_special_add');        $data['button_image_add'] = $this->language->get('button_image_add');        $data['button_remove'] = $this->language->get('button_remove');        $data['button_recurring_add'] = $this->language->get('button_recurring_add');        $data['button_command_add'] = $this->language->get('button_command_add');        $data['tab_general'] = $this->language->get('tab_general');        $data['tab_data'] = $this->language->get('tab_data');        $data['tab_attribute'] = $this->language->get('tab_attribute');        $data['tab_option'] = $this->language->get('tab_option');        $data['tab_recurring'] = $this->language->get('tab_recurring');        $data['tab_discount'] = $this->language->get('tab_discount');        $data['tab_special'] = $this->language->get('tab_special');        $data['tab_image'] = $this->language->get('tab_image');        $data['tab_links'] = $this->language->get('tab_links');        $data['tab_design'] = $this->language->get('tab_design');        $data['tab_openbay'] = $this->language->get('tab_openbay');        $data['tab_commands'] = $this->language->get('tab_commands');        $data['tab_price'] = $this->language->get('tab_price');        if (isset($this->error['warning'])) {            $data['error_warning'] = $this->error['warning'];        } else {            $data['error_warning'] = '';        }        if (isset($this->error['name'])) {            $data['error_name'] = $this->error['name'];        } else {            $data['error_name'] = array();        }        if (isset($this->error['meta_title'])) {            $data['error_meta_title'] = $this->error['meta_title'];        } else {            $data['error_meta_title'] = array();        }        if (isset($this->error['duration'])) {            $data['error_duration'] = $this->error['duration'];        } else {            $data['error_duration'] = '';        }        if (isset($this->error['price'])) {            $data['error_price'] = $this->error['price'];        } else {            $data['error_price'] = array();        }        $url = '';        if (isset($this->request->get['filter_name'])) {            $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));        }        if (isset($this->request->get['filter_price'])) {            $url .= '&filter_price=' . $this->request->get['filter_price'];        }        if (isset($this->request->get['filter_quantity'])) {            $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];        }        if (isset($this->request->get['filter_status'])) {            $url .= '&filter_status=' . $this->request->get['filter_status'];        }        if (isset($this->request->get['sort'])) {            $url .= '&sort=' . $this->request->get['sort'];        }        if (isset($this->request->get['order'])) {            $url .= '&order=' . $this->request->get['order'];        }        if (isset($this->request->get['page'])) {            $url .= '&page=' . $this->request->get['page'];        }        $data['breadcrumbs'] = array();        $data['breadcrumbs'][] = array(            'text' => $this->language->get('text_home'),            'href' => $this->url->link('dashboard/common/dashboard', 'token=' . $this->session->data['token'], 'SSL')        );        $data['breadcrumbs'][] = array(            'text' => $this->language->get('heading_title'),            'href' => $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL')        );        if (!isset($this->request->get['product_id'])) {            $data['action'] = $this->url->link('dashboard/catalog/product/add', 'token=' . $this->session->data['token'] . $url, 'SSL');        } else {            $data['action'] = $this->url->link('dashboard/catalog/product/edit', 'token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . $url, 'SSL');        }        $data['cancel'] = $this->url->link('dashboard/catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL');        if (isset($this->request->get['product_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {            $product_info = $this->model_catalog_product->getProduct($this->request->get['product_id']);        }        $data['token'] = $this->session->data['token'];        $this->load->model('localisation/language');        $data['languages'] = $this->model_localisation_language->getLanguages();        if (isset($this->request->post['product_description'])) {            $data['product_description'] = $this->request->post['product_description'];        } elseif (isset($this->request->get['product_id'])) {            $data['product_description'] = $this->model_catalog_product->getProductDescriptions($this->request->get['product_id']);        } else {            $data['product_description'] = array();        }        if (isset($this->request->post['image'])) {            $data['image'] = $this->request->post['image'];        } elseif (!empty($product_info)) {            $data['image'] = $product_info['image'];        } else {            $data['image'] = '';        }        $this->load->model('tool/image');        if (isset($this->request->post['image']) && is_file(DIR_DASHBOARD_IMAGE . $this->request->post['image'])) {            $data['thumb'] = $this->model_tool_image->resize($this->request->post['image'], 100, 100);        } elseif (!empty($product_info) && is_file(DIR_DASHBOARD_IMAGE . $product_info['image'])) {            $data['thumb'] = $this->model_tool_image->resize($product_info['image'], 100, 100);        } else {            $data['thumb'] = $this->model_tool_image->resize('no_image.png', 100, 100);        }        $data['placeholder'] = $this->model_tool_image->resize('no_image.png', 100, 100);        if (isset($this->request->post['price'])) {            $data['price'] = $this->request->post['price'];        } elseif (!empty($product_info)) {            $data['price'] = $product_info['price'];        } else {            $data['price'] = '';        }        $this->load->model('catalog/recurring');        $data['recurrings'] = $this->model_catalog_recurring->getRecurrings();        if (isset($this->request->post['product_recurrings'])) {            $data['product_recurrings'] = $this->request->post['product_recurrings'];        } elseif (!empty($product_info)) {            $data['product_recurrings'] = $this->model_catalog_product->getRecurrings($product_info['product_id']);        } else {            $data['product_recurrings'] = array();        }        if (isset($this->request->post['date_available'])) {            $data['date_available'] = $this->request->post['date_available'];        } elseif (!empty($product_info)) {            $data['date_available'] = ($product_info['date_available'] != '0000-00-00') ? $product_info['date_available'] : '';        } else {            $data['date_available'] = date('Y-m-d');        }        if (isset($this->request->post['sort_order'])) {            $data['sort_order'] = $this->request->post['sort_order'];        } elseif (!empty($product_info)) {            $data['sort_order'] = $product_info['sort_order'];        } else {            $data['sort_order'] = 1;        }        if (isset($this->request->post['status'])) {            $data['status'] = $this->request->post['status'];        } elseif (!empty($product_info)) {            $data['status'] = $product_info['status'];        } else {            $data['status'] = true;        }        if (isset($this->request->post['minecraft_product_group_id'])) {            $data['minecraft_product_group_id'] = $this->request->post['minecraft_product_group_id'];        } elseif (!empty($product_info)) {            $data['minecraft_product_group_id'] = $product_info['minecraft_product_group_id'];        } else {            $data['minecraft_product_group_id'] = 0;        }        $this->load->model('minecraft/group');        $data['minecraft_groups'] = $this->model_minecraft_group->getGroups();        // Categories        $this->load->model('catalog/category');        if (isset($this->request->post['product_category'])) {            $categories = $this->request->post['product_category'];        } elseif (isset($this->request->get['product_id'])) {            $categories = $this->model_catalog_product->getProductCategories($this->request->get['product_id']);        } else {            $categories = array();        }        $data['product_categories'] = array();        foreach ($categories as $category_id) {            $category_info = $this->model_catalog_category->getCategory($category_id);            if ($category_info) {                $data['product_categories'][] = array(                    'category_id' => $category_info['category_id'],                    'name' => $category_info['name']                );            }        }        // Servers        $this->load->model('catalog/server');        if (isset($this->request->post['product_server'])) {            $servers = $this->request->post['product_server'];        } elseif (isset($this->request->get['product_id'])) {            $servers = $this->model_catalog_product->getProductServers($this->request->get['product_id']);        } else {            $servers = array();        }        $data['product_servers'] = array();        foreach ($servers as $server_id) {            $server_info = $this->model_catalog_server->getServer($server_id);            if ($server_info) {                $data['product_servers'][] = array(                    'server_id' => $server_info['minecraft_server_id'],                    'name' => $server_info['name']                );            }        }        // Events        $this->load->model("minecraft/event");        $data['events'] = array();        $events = $this->model_minecraft_event->getEvents();        foreach ($events as $event) {            $data['events'][] = array(                "event_id" => $event['minecraft_event_id'],                "name" => $event['name']            );        }        // Commands        $data['commands'] = array();                if (isset($this->request->post['product_command'])) {            $data['commands'] = $this->request->post['product_command'];        } elseif (isset($this->request->get['product_id'])) {            foreach ($data['events'] as $event) {                $commands = $this->model_minecraft_event->getProductEvent($this->request->get['product_id'], $event['event_id']);                if (empty($commands['commands'])) {                    continue;                }                $cmds = json_decode($commands['commands'], true);                foreach ($cmds as $cmd) {                    $data['commands'][] = array(                        "event_id" => $event['event_id'],                        "value" => $cmd                    );                }                continue;            }        } else {            $data['commands'] = array();        }        // lifetime        if (isset($this->request->post['lifetime'])) {            $data['lifetime'] = $this->request->post['lifetime'];        } elseif (!empty($product_info)) {            $data['lifetime'] = $product_info['lifetime'];        } else {            $data['lifetime'] = 0;        }        // Duration        if (isset($this->request->post['duration'])) {            $data['duration'] = $this->request->post['duration'];        } elseif (!empty($product_info)) {            $data['duration'] = $product_info['duration'];        } else {            $data['duration'] = 0;        }        $this->load->model('customer/customer_group');        $data['customer_groups'] = $this->model_customer_customer_group->getCustomerGroups();        if (isset($this->request->post['product_discount'])) {            $product_discounts = $this->request->post['product_discount'];        } elseif (isset($this->request->get['product_id'])) {            $product_discounts = $this->model_catalog_product->getProductDiscounts($this->request->get['product_id']);        } else {            $product_discounts = array();        }        $data['product_discounts'] = array();        foreach ($product_discounts as $product_discount) {            $data['product_discounts'][] = array(                'customer_group_id' => $product_discount['customer_group_id'],                'quantity' => $product_discount['quantity'],                'priority' => $product_discount['priority'],                'price' => $product_discount['price'],                'date_start' => ($product_discount['date_start'] != '0000-00-00') ? $product_discount['date_start'] : '',                'date_end' => ($product_discount['date_end'] != '0000-00-00') ? $product_discount['date_end'] : ''            );        }        if (isset($this->request->post['product_special'])) {            $product_specials = $this->request->post['product_special'];        } elseif (isset($this->request->get['product_id'])) {            $product_specials = $this->model_catalog_product->getProductSpecials($this->request->get['product_id']);        } else {            $product_specials = array();        }        $data['product_specials'] = array();        foreach ($product_specials as $product_special) {            $data['product_specials'][] = array(                'customer_group_id' => $product_special['customer_group_id'],                'priority' => $product_special['priority'],                'price' => $product_special['price'],                'date_start' => ($product_special['date_start'] != '0000-00-00') ? $product_special['date_start'] : '',                'date_end' => ($product_special['date_end'] != '0000-00-00') ? $product_special['date_end'] : ''            );        }        if (isset($this->request->post['product_price'])) {            $product_prices = $this->request->post['product_price'];        } elseif (isset($this->request->get['product_id'])) {            $product_prices = $this->model_catalog_product->getProductPrices($this->request->get['product_id']);        } else {            $product_prices = array();        }        $data['currencycode'] = $this->config->get("config_currency");        $data['currencies'] = $this->currency->getCurrencies();        $data['product_price'] = array();        foreach ($product_prices as $product_price) {            $data['product_price'][$product_price['currency_id']] = array(                'price' => (isset($product_price['price'])) ? $product_price['price'] : '',                'convert' => (isset($product_price['convert'])) ? $product_price['convert'] : ''            );        }        $data['header'] = $this->load->controller('common/header');        $data['column_left'] = $this->load->controller('common/column_left');        $data['footer'] = $this->load->controller('common/footer');        $this->response->setOutput($this->load->view('catalog/product_form.tpl', $data));    }    protected function validateForm() {        if (!$this->user->hasPermission('modify', 'catalog/product')) {            $this->error['warning'] = $this->language->get('error_permission');        }        foreach ($this->request->post['product_description'] as $language_id => $value) {            if ((utf8_strlen($value['name']) < 3) || (utf8_strlen($value['name']) > 255)) {                $this->error['name'][$language_id] = $this->language->get('error_name');            }        }        if ($this->request->post['lifetime'] != true && (!intval($this->request->post['duration']) || ($this->request->post['duration'] && $this->request->post['duration'] < 1))) {            $this->error['duration'] = $this->language->get('error_duration_true');        }        if ($this->request->post['lifetime'] == true && (!intval($this->request->post['duration']) && $this->request->post['duration'] != 0)) {            $this->error['duration'] = $this->language->get('error_duration_false');        }        foreach ($this->request->post['product_price'] as $currency_id => $value) {            if ($currency_id != $this->currency->getId($this->config->get("config_currency")) && (!$value['convert'] && (!is_numeric($value['price']) || utf8_strlen($value['price']) < 1))) {                $this->error['price'][$currency_id] = $this->language->get('error_price');            }            if ($currency_id == $this->currency->getId($this->config->get("config_currency")) && (!is_numeric($value['price']) || utf8_strlen($value['price']) < 1)) {                $this->error['price'][$currency_id] = $this->language->get('error_price');            }        }        if ($this->error && !isset($this->error['warning'])) {            $this->error['warning'] = $this->language->get('error_warning');        }        return !$this->error;    }    protected function validateDelete() {        if (!$this->user->hasPermission('modify', 'catalog/product')) {            $this->error['warning'] = $this->language->get('error_permission');        }        return !$this->error;    }    protected function validateCopy() {        if (!$this->user->hasPermission('modify', 'catalog/product')) {            $this->error['warning'] = $this->language->get('error_permission');        }        return !$this->error;    }    public function autocomplete() {        $json = array();        if (isset($this->request->get['filter_name'])) {            $this->load->model('catalog/product');            if (isset($this->request->get['filter_name'])) {                $filter_name = $this->request->get['filter_name'];            } else {                $filter_name = '';            }            if (isset($this->request->get['limit'])) {                $limit = $this->request->get['limit'];            } else {                $limit = 5;            }            $filter_data = array(                'filter_name' => $filter_name,                'start' => 0,                'limit' => $limit            );            $results = $this->model_catalog_product->getProducts($filter_data);            foreach ($results as $result) {                $json[] = array(                    'product_id' => $result['product_id'],                    'name' => strip_tags(html_entity_decode($result['name'], ENT_QUOTES, 'UTF-8')),                    'price' => $result['price']                );            }        }        $this->response->addHeader('Content-Type: application/json');        $this->response->setOutput(json_encode($json));    }}