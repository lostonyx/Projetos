<?phpclass Cart{    private $data = array();    public function __construct($registry)    {        $this->config = $registry->get('config');        $this->customer = $registry->get('customer');        $this->session = $registry->get('session');        $this->db = $registry->get('db');        $this->currency = $registry->get('currency');        // Remove all the expired carts with no customer ID        $this->db->query("DELETE FROM " . DB_PREFIX . "cart WHERE customer_id = '0' AND date_added < DATE_SUB(NOW(), INTERVAL 1 HOUR)");        if ($this->customer->getId()) {            // We want to change the session ID on all the old items in the customers cart            $this->db->query("UPDATE " . DB_PREFIX . "cart SET session_id = '" . $this->db->escape($this->session->getId()) . "' WHERE customer_id = '" . (int)$this->customer->getId() . "'");            // Once the customer is logged in we want to update the customer ID on all items he has            $cart_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart WHERE customer_id = '0' AND session_id = '" . $this->db->escape($this->session->getId()) . "'");            foreach ($cart_query->rows as $cart) {                $this->db->query("DELETE FROM " . DB_PREFIX . "cart WHERE cart_id = '" . (int)$cart['cart_id'] . "'");                // The advantage of using $this->add is that it will check if the products already exist and increaser the quantity if necessary.                $this->add($cart['product_id'], $cart['quantity'], json_decode($cart['option']), $cart['recurring_id']);            }        }    }    public function add($product_id, $quantity = 1, $option = array(), $recurring_id = 0)    {        $query = $this->db->query(""            . "SELECT COUNT(*) AS total FROM " . DB_PREFIX . "cart "            . "WHERE customer_id = '" . (int)$this->customer->getId() . "' "            . "AND session_id = '" . $this->db->escape($this->session->getId()) . "' "            . "AND product_id = '" . (int)$product_id . "' AND recurring_id = '" . (int)$recurring_id . "'");        if (!$query->row['total']) {            $this->db->query("INSERT " . DB_PREFIX . "cart SET customer_id = '" . (int)$this->customer->getId() . "', session_id = '" . $this->db->escape($this->session->getId()) . "', product_id = '" . (int)$product_id . "', recurring_id = '" . (int)$recurring_id . "', `option` = '" . $this->db->escape(json_encode($option)) . "', quantity = '" . (int)$quantity . "', date_added = NOW()");        } else {            $this->db->query("UPDATE " . DB_PREFIX . "cart SET quantity = (quantity + " . (int)$quantity . ") WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND product_id = '" . (int)$product_id . "' AND recurring_id = '" . (int)$recurring_id . "' AND `option` = '" . $this->db->escape(json_encode($option)) . "'");        }    }    public function update($cart_id, $quantity)    {        $this->db->query("UPDATE " . DB_PREFIX . "cart SET quantity = '" . (int)$quantity . "' WHERE cart_id = '" . (int)$cart_id . "' AND customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "'");    }    public function clear()    {        $this->db->query("DELETE FROM " . DB_PREFIX . "cart WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "'");    }    public function getSubTotal()    {        $total = 0;        foreach ($this->getProducts() as $product) {            $total += $product['total'];        }        return $total;    }    public function getProducts()    {        $product_data = array();        $cart_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "'");        $time = date("Y-m-d-H-i", time());        foreach ($cart_query->rows as $cart) {            $product_query = $this->db->query(""                . "SELECT * FROM " . DB_PREFIX . "product p "                . "LEFT JOIN " . DB_PREFIX . "product_lang pd ON (p.product_id = pd.product_id) "                . "LEFT JOIN " . DB_PREFIX . "product_price pc ON (p.product_id = pc.product_id) "                . "WHERE "                . "p.product_id = '" . (int)$cart['product_id'] . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' "                . "AND pc.currency_id = " . (int)$this->currency->getId() . " "                . "AND p.date_available <= '" . $time . "' AND p.status = '2'");            if ($product_query->num_rows && ($cart['quantity'] > 0)) {                $price = $product_query->row['price'];                // Product Discounts                $discount_quantity = 0;                $cart_2_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart "                    . "WHERE customer_id = '" . (int)$this->customer->getId() . "' "                    . "AND session_id = '" . $this->db->escape($this->session->getId()) . "'");                foreach ($cart_2_query->rows as $cart_2) {                    if ($cart_2['product_id'] == $cart['product_id']) {                        $discount_quantity += $cart_2['quantity'];                    }                }                $product_discount_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_discount WHERE product_id = '" . (int)$cart['product_id'] . "' AND customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND quantity <= '" . (int)$discount_quantity . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY quantity DESC, priority ASC, price ASC LIMIT 1");                if ($product_discount_query->num_rows) {                    $price = $product_discount_query->row['price'];                }                // Product Specials                $product_special_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_special WHERE product_id = '" . (int)$cart['product_id'] . "' AND customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY priority ASC, price ASC LIMIT 1");                if ($product_special_query->num_rows) {                    $price = $product_special_query->row['price'];                }                $recurring_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "recurring r LEFT JOIN " . DB_PREFIX . "product_recurring pr ON (r.recurring_id = pr.recurring_id) LEFT JOIN " . DB_PREFIX . "recurring_lang rd ON (r.recurring_id = rd.recurring_id) WHERE r.recurring_id = '" . (int)$cart['recurring_id'] . "' AND pr.product_id = '" . (int)$cart['product_id'] . "' AND rd.language_id = " . (int)$this->config->get('config_language_id') . " AND r.status = 1 AND pr.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "'");                if ($recurring_query->num_rows) {                    $recurring = array(                        'recurring_id' => $cart['recurring_id'],                        'name' => $recurring_query->row['name'],                        'frequency' => $recurring_query->row['frequency'],                        'price' => $recurring_query->row['price'],                        'cycle' => $recurring_query->row['cycle'],                        'duration' => $recurring_query->row['duration'],                        'trial' => $recurring_query->row['trial_status'],                        'trial_frequency' => $recurring_query->row['trial_frequency'],                        'trial_price' => $recurring_query->row['trial_price'],                        'trial_cycle' => $recurring_query->row['trial_cycle'],                        'trial_duration' => $recurring_query->row['trial_duration']                    );                } else {                    $recurring = false;                }                // Convert                if ($product_query->row['convert'] == true) {                    $price = $this->currency->convert($price, $this->config->get("config_currency"), $this->currency->getCode());                }                $product_data[] = array(                    'cart_id' => $cart['cart_id'],                    'product_id' => $product_query->row['product_id'],                    'name' => $product_query->row['name'],                    'image' => $product_query->row['image'],                    'quantity' => $cart['quantity'],                    'duration' => $product_query->row['duration'],                    'lifetime' => $product_query->row['lifetime'],                    'price' => $price,                    'total' => $price * $cart['quantity'],                    'convert' => $product_query->row['convert'],                    'recurring' => $recurring                );            } else {                $this->remove($cart['cart_id']);            }        }        return $product_data;    }    public function remove($cart_id)    {        $this->db->query("DELETE FROM " . DB_PREFIX . "cart "            . "WHERE cart_id = '" . (int)$cart_id . "' "            . "AND customer_id = '" . (int)$this->customer->getId() . "' "            . "AND session_id = '" . $this->db->escape($this->session->getId()) . "'");    }    public function getTotal()    {        $total = 0;        foreach ($this->getProducts() as $product) {            $total += $product['total'];        }        return $total;    }    public function countProducts()    {        $product_total = 0;        $products = $this->getProducts();        foreach ($products as $product) {            $product_total += $product['quantity'];        }        return $product_total;    }    public function hasProducts()    {        return count($this->getProducts());    }    public function hasRecurringProducts()    {        return count($this->getRecurringProducts());    }    public function getRecurringProducts()    {        $product_data = array();        foreach ($this->getProducts() as $value) {            if ($value['recurring']) {                $product_data[] = $value;            }        }        return $product_data;    }}